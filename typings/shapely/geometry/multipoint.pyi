"""
This type stub file was generated by pyright.
"""

import sys
from shapely.geometry.base import BaseMultipartGeometry, exceptNull
from shapely.geometry.proxy import CachingGeometryProxy

"""Collections of points and related utilities
"""
if sys.version_info[0] < 3: ...

class MultiPoint(BaseMultipartGeometry):
    """A collection of one or more points

    A MultiPoint has zero area and zero length.

    Attributes
    ----------
    geoms : sequence
        A sequence of Points
    """

    def __init__(self, points=...) -> None:
        """
        Parameters
        ----------
        points : sequence
            A sequence of (x, y [,z]) numeric coordinate pairs or triples or a
            sequence of objects that implement the numpy array interface,
            including instances of Point.

        Example
        -------
        Construct a 2 point collection

          >>> ob = MultiPoint([[0.0, 0.0], [1.0, 2.0]])
          >>> len(ob.geoms)
          2
          >>> type(ob.geoms[0]) == Point
          True
        """
        ...
    def shape_factory(self, *args): ...
    @property
    def __geo_interface__(self): ...
    def svg(self, scale_factor=..., fill_color=...):  # -> str:
        """Returns a group of SVG circle elements for the MultiPoint geometry.

        Parameters
        ==========
        scale_factor : float
            Multiplication factor for the SVG circle diameters.  Default is 1.
        fill_color : str, optional
            Hex string for fill color. Default is to use "#66cc99" if
            geometry is valid, and "#ff3333" if invalid.
        """
        ...
    @property
    @exceptNull
    def ctypes(self): ...
    @exceptNull
    def array_interface(self):  # -> dict[str, int | str | Unknown]:
        """Provide the Numpy array protocol."""
        ...
    __array_interface__ = ...

class MultiPointAdapter(CachingGeometryProxy, MultiPoint):
    context = ...
    _other_owned = ...
    def __init__(self, context) -> None: ...
    @property
    def __array_interface__(self):  # -> dict[str, int | str | Unknown]:
        """Provide the Numpy array protocol."""
        ...

def asMultiPoint(context):  # -> MultiPointAdapter:
    """Adapt a sequence of objects to the MultiPoint interface"""
    ...

def geos_multipoint_from_py(ob): ...
