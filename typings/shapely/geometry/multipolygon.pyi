"""
This type stub file was generated by pyright.
"""

import sys
from shapely.geometry.base import BaseMultipartGeometry
from shapely.geometry.proxy import CachingGeometryProxy

"""Collections of polygons and related utilities
"""
if sys.version_info[0] < 3:
    ...
class MultiPolygon(BaseMultipartGeometry):
    """A collection of one or more polygons
    
    If component polygons overlap the collection is `invalid` and some
    operations on it may fail.
    
    Attributes
    ----------
    geoms : sequence
        A sequence of `Polygon` instances
    """
    def __init__(self, polygons=..., context_type=...) -> None:
        """
        Parameters
        ----------
        polygons : sequence
            A sequence of (shell, holes) tuples where shell is the sequence
            representation of a linear ring (see linearring.py) and holes is
            a sequence of such linear rings

        Example
        -------
        Construct a collection from a sequence of coordinate tuples

          >>> ob = MultiPolygon( [
          ...     (
          ...     ((0.0, 0.0), (0.0, 1.0), (1.0, 1.0), (1.0, 0.0)), 
          ...     [((0.1,0.1), (0.1,0.2), (0.2,0.2), (0.2,0.1))]
          ...     )
          ... ] )
          >>> len(ob.geoms)
          1
          >>> type(ob.geoms[0]) == Polygon
          True
        """
        ...
    
    def shape_factory(self, *args):
        ...
    
    @property
    def __geo_interface__(self): # -> dict[str, str | list[Unknown]]:
        ...
    
    def svg(self, scale_factor=..., fill_color=...): # -> str:
        """Returns group of SVG path elements for the MultiPolygon geometry.

        Parameters
        ==========
        scale_factor : float
            Multiplication factor for the SVG stroke-width.  Default is 1.
        fill_color : str, optional
            Hex string for fill color. Default is to use "#66cc99" if
            geometry is valid, and "#ff3333" if invalid.
        """
        ...
    


class MultiPolygonAdapter(CachingGeometryProxy, MultiPolygon):
    context = ...
    _other_owned = ...
    def __init__(self, context, context_type=...) -> None:
        ...
    


def asMultiPolygon(context): # -> MultiPolygonAdapter:
    """Adapts a sequence of objects to the MultiPolygon interface"""
    ...

def geos_multipolygon_from_py(ob): # -> tuple[Any, Literal[2, 3]]:
    """ob must provide Python geo interface coordinates."""
    ...

def geos_multipolygon_from_polygons(arg): # -> tuple[Any | Unknown, Unknown | Literal[2, 3]] | tuple[Any, Literal[3]] | tuple[Any, Any | Literal[2, 3]]:
    """Creates a GEOS multipolygon from a sequence of polygon-like objects.

    Parameters
    ----------
    arg : sequence or MultiPolygon

    Returns
    -------
    int
        Pointer to a GEOS multipolygon.

    """
    ...

if __name__ == "__main__":
    ...
