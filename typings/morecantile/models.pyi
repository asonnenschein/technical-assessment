"""
This type stub file was generated by pyright.
"""

from typing import Dict, Iterator, List, Optional, Sequence, Tuple, Union
from pydantic import AnyHttpUrl, BaseModel, validator
from rasterio.crs import CRS
from .commons import BoundingBox, Coords, Tile

"""Pydantic modules for OGC TileMatrixSets (https://www.ogc.org/standards/tms)"""
NumType = Union[float, int]
BoundsType = Tuple[NumType, NumType]
LL_EPSILON = ...
WGS84_CRS = ...
class CRSType(CRS, AnyHttpUrl):
    """
    A geographic or projected coordinate reference system.
    """
    @classmethod
    def __get_validators__(cls): # -> Generator[(value: CRS | AnyHttpUrl) -> CRS, None, None]:
        """validator for the type."""
        ...
    
    @classmethod
    def validate(cls, value: Union[CRS, AnyHttpUrl]): # -> CRS:
        """Validate CRS."""
        ...
    
    @classmethod
    def __modify_schema__(cls, field_schema): # -> None:
        """Update default schema."""
        ...
    
    def __repr__(self): # -> str:
        """Type representation."""
        ...
    


def CRS_to_uri(crs: CRS) -> str:
    """Convert CRS to URI."""
    ...

def crs_axis_inverted(crs: CRS) -> bool:
    """Check if CRS has inverted AXIS (lat,lon) instead of (lon,lat)."""
    ...

class TMSBoundingBox(BaseModel):
    """Bounding box"""
    type: str = ...
    crs: CRSType
    lowerCorner: BoundsType
    upperCorner: BoundsType
    class Config:
        """Configure TMSBoundingBox."""
        arbitrary_types_allowed = ...
        json_encoders = ...
    
    


class TileMatrix(BaseModel):
    """Tile matrix"""
    type: str = ...
    title: Optional[str]
    abstract: Optional[str]
    keywords: Optional[List[str]]
    identifier: str = ...
    scaleDenominator: float
    topLeftCorner: BoundsType
    tileWidth: int
    tileHeight: int
    matrixWidth: int
    matrixHeight: int
    class Config:
        """Forbid additional items like variableMatrixWidth."""
        extra = ...
    
    


class TileMatrixSet(BaseModel):
    """Tile matrix set"""
    type: str = ...
    title: str
    abstract: Optional[str]
    keywords: Optional[List[str]]
    identifier: str = ...
    supportedCRS: CRSType
    wellKnownScaleSet: Optional[AnyHttpUrl] = ...
    boundingBox: Optional[TMSBoundingBox]
    tileMatrix: List[TileMatrix]
    class Config:
        """Configure TileMatrixSet."""
        arbitrary_types_allowed = ...
        json_encoders = ...
    
    
    @validator("tileMatrix")
    def sort_tile_matrices(cls, v): # -> List[Unknown]:
        """Sort matrices by identifier"""
        ...
    
    def __iter__(self): # -> Generator[TileMatrix, None, None]:
        """Iterate over matrices"""
        ...
    
    def __repr__(self): # -> str:
        """Simplify default pydantic model repr."""
        ...
    
    @property
    def crs(self) -> CRS:
        """Fetch CRS from epsg"""
        ...
    
    @property
    def minzoom(self) -> int:
        """TileMatrixSet minimum TileMatrix identifier"""
        ...
    
    @property
    def maxzoom(self) -> int:
        """TileMatrixSet maximum TileMatrix identifier"""
        ...
    
    @classmethod
    def load(cls, name: str): # -> TileMatrixSet:
        """Load default TileMatrixSet."""
        ...
    
    @classmethod
    def custom(cls, extent: List[float], crs: CRS, tile_width: int = ..., tile_height: int = ..., matrix_scale: List = ..., extent_crs: Optional[CRS] = ..., minzoom: int = ..., maxzoom: int = ..., title: str = ..., identifier: str = ...): # -> TileMatrixSet:
        """
        Construct a custom TileMatrixSet.

        Attributes
        ----------
        crs: rasterio.crs.CRS
            Tile Matrix Set coordinate reference system
        extent: list
            Bounding box of the Tile Matrix Set, (left, bottom, right, top).
        tile_width: int
            Width of each tile of this tile matrix in pixels (default is 256).
        tile_height: int
            Height of each tile of this tile matrix in pixels (default is 256).
        matrix_scale: list
            Tiling schema coalescence coefficient (default: [1, 1] for EPSG:3857).
            Should be set to [2, 1] for EPSG:4326.
            see: http://docs.opengeospatial.org/is/17-083r2/17-083r2.html#14
        extent_crs: rasterio.crs.CRS
            Extent's coordinate reference system, as a rasterio CRS object.
            (default: same as input crs)
        minzoom: int
            Tile Matrix Set minimum zoom level (default is 0).
        maxzoom: int
            Tile Matrix Set maximum zoom level (default is 24).
        title: str
            Tile Matrix Set title (default is 'Custom TileMatrixSet')
        identifier: str
            Tile Matrix Set identifier (default is 'Custom')

        Returns:
        --------
        TileMatrixSet

        """
        ...
    
    def matrix(self, zoom: int) -> TileMatrix:
        """Return the TileMatrix for a specific zoom."""
        ...
    
    def zoom_for_res(self, res: float, max_z: Optional[int] = ..., zoom_level_strategy: str = ...) -> int:
        """Get TMS zoom level corresponding to a specific resolution.

        Args:
            res (float): Resolution in TMS unit.
            max_z (int): Maximum zoom level (default is tms maxzoom).
            zoom_level_strategy (str): Strategy to determine zoom level (same as in GDAL 3.2).
                LOWER will select the zoom level immediately below the theoretical computed non-integral zoom level.
                On the contrary, UPPER will select the immediately above zoom level.
                Defaults to AUTO which selects the closest zoom level.
                ref: https://gdal.org/drivers/raster/cog.html#raster-cog

        Returns:
            int: TMS zoom for a given resolution.

        Examples:
            >>> zoom_for_res(430.021)

        """
        ...
    
    def lnglat(self, x: float, y: float, truncate=...) -> Coords:
        """Transform point(x,y) to longitude and latitude."""
        ...
    
    def xy(self, lng: float, lat: float, truncate=...) -> Coords:
        """Transform longitude and latitude coordinates to TMS CRS."""
        ...
    
    def tile(self, lng: float, lat: float, zoom: int, truncate=...) -> Tile:
        """
        Get the tile containing a longitude and latitude.

        Parameters
        ----------
        lng, lat : float
            A longitude and latitude pair in decimal degrees.
        zoom : int
            The web mercator zoom level.
        truncate : bool
            Whether or not to truncate inputs to limits of WGS84 bounds.

        Returns
        -------
        Tile

        """
        ...
    
    def xy_bounds(self, *tile: Tile) -> BoundingBox:
        """
        Return the bounding box of the (x, y, z) tile in input projection.

        Attributes
        ----------
        tile: A tuple of (x, y, z) tile coordinates or a Tile object we want the bounding box of.

        Returns
        -------
        The bounding box of the input tile.

        """
        ...
    
    def ul(self, *tile: Tile) -> Coords:
        """
        Return the upper left coordinate of the (x, y, z) tile in Lat Lon.

        Attributes
        ----------
        tile: (x, y, z) tile coordinates or a Tile object we want the upper left geospatial coordinates of.

        Returns
        -------
        The upper left geospatial coordiantes of the input tile.

        """
        ...
    
    def bounds(self, *tile: Tile) -> BoundingBox:
        """
        Return the bounding box of the (x, y, z) tile in LatLong.

        Attributes
        ----------
        tile: A tuple of (x, y, z) tile coordinates or a Tile object we want the bounding box of.

        Returns
        -------
        The bounding box of the input tile.

        """
        ...
    
    @property
    def xy_bbox(self): # -> BoundingBox:
        """Return TMS bounding box in TileMatrixSet's CRS."""
        ...
    
    @property
    def bbox(self): # -> BoundingBox:
        """Return TMS bounding box in WGS84."""
        ...
    
    def intersect_tms(self, bbox: BoundingBox) -> bool:
        """Check if a bounds intersects with the TMS bounds."""
        ...
    
    def tiles(self, west: float, south: float, east: float, north: float, zooms: Sequence[int], truncate: bool = ...) -> Iterator[Tile]:
        """
        Get the tiles overlapped by a geographic bounding box

        Original code from https://github.com/mapbox/mercantile/blob/master/mercantile/__init__.py#L424

        Parameters
        ----------
        west, south, east, north : sequence of float
            Bounding values in decimal degrees.
        zooms : int or sequence of int
            One or more zoom levels.
        truncate : bool, optional
            Whether or not to truncate inputs to web mercator limits.

        Yields
        ------
        Tile

        Notes
        -----
        A small epsilon is used on the south and east parameters so that this
        function yields exactly one tile when given the bounds of that same tile.

        """
        ...
    
    def feature(self, tile: Tile, fid: Optional[str] = ..., props: Dict = ..., buffer: Optional[NumType] = ..., precision: Optional[int] = ..., projected: bool = ...) -> Dict:
        """
        Get the GeoJSON feature corresponding to a tile.

        Originaly from https://github.com/mapbox/mercantile/blob/master/mercantile/__init__.py

        Parameters
        ----------
        tile : Tile or sequence of int
            May be be either an instance of Tile or 3 ints, X, Y, Z.
        fid : str, optional
            A feature id.
        props : dict, optional
            Optional extra feature properties.
        buffer : float, optional
            Optional buffer distance for the GeoJSON polygon.
        precision: float
            If >= 0, geometry coordinates will be rounded to this number of decimal,
            otherwise original coordinate values will be preserved (default).
        projected : bool, optional
            Return coordinates in TMS projection. Default is false.

        Returns
        -------
        dict

        """
        ...
    


