"""
This type stub file was generated by pyright.
"""

log = ...
class FionaDateType(str):
    """Dates without time."""
    ...


class FionaTimeType(str):
    """Times without dates."""
    ...


class FionaDateTimeType(str):
    """Dates and times."""
    ...


pattern_date = ...
pattern_time = ...
pattern_datetime = ...
class group_accessor:
    def __init__(self, m) -> None:
        ...
    
    def group(self, i): # -> Literal[0]:
        ...
    


def parse_time(text): # -> tuple[Literal[0], Literal[0], Literal[0], int, int, int, int, float | int | None]:
    """ Given a time, returns a datetime tuple

    Parameters
    ----------
    text: string to be parsed

    Returns
    -------
        (int, int , int, int, int, int, int, int):
            datetime tuple: (year, month, day, hour, minute, second, microsecond, utcoffset in minutes or None)

    """
    ...

def parse_date(text): # -> tuple[int, int, int, Literal[0], Literal[0], Literal[0], Literal[0], None]:
    """Given a date, returns a datetime tuple

    Parameters
    ----------
    text: string to be parsed

    Returns
    -------
        (int, int , int, int, int, int, int, int):
            datetime tuple: (year, month, day, hour, minute, second, microsecond, utcoffset in minutes or None)
    """
    ...

def parse_datetime(text): # -> tuple[int, int, int, int, int, int, int, float | int | None]:
    """Given a datetime, returns a datetime tuple

    Parameters
    ----------
    text: string to be parsed

    Returns
    -------
        (int, int , int, int, int, int, int, int):
            datetime tuple: (year, month, day, hour, minute, second, microsecond, utcoffset in minutes or None)
    """
    ...

