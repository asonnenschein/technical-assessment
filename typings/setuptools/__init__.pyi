"""
This type stub file was generated by pyright.
"""

import functools
import os
import re
import _distutils_hack.override
import distutils.core
import setuptools.version
from fnmatch import fnmatchcase
from distutils.errors import DistutilsOptionError
from distutils.util import convert_path
from ._deprecation_warning import SetuptoolsDeprecationWarning
from setuptools.extension import Extension
from setuptools.dist import Distribution
from setuptools.depends import Require
from . import monkey

"""Extensions to the 'distutils' for large or complex distributions"""
__version__ = ...
bootstrap_install_from = ...
run_2to3_on_doctests = ...
lib2to3_fixer_packages = ...

class PackageFinder:
    """
    Generate a list of all Python packages found within a directory
    """

    @classmethod
    def find(cls, where=..., exclude=..., include=...):  # -> list[str]:
        """Return a list all Python packages found within directory 'where'

        'where' is the root directory which will be searched for packages.  It
        should be supplied as a "cross-platform" (i.e. URL-style) path; it will
        be converted to the appropriate local path syntax.

        'exclude' is a sequence of package names to exclude; '*' can be used
        as a wildcard in the names, such that 'foo.*' will exclude all
        subpackages of 'foo' (but not 'foo' itself).

        'include' is a sequence of package names to include.  If it's
        specified, only the named packages will be included.  If it's not
        specified, all found packages will be included.  'include' can contain
        shell style wildcard patterns just like 'exclude'.
        """
        ...

class PEP420PackageFinder(PackageFinder): ...

find_packages = ...
find_namespace_packages = ...

def setup(**attrs): ...

_Command = ...

class Command(_Command):
    __doc__ = ...
    command_consumes_arguments = ...
    def __init__(self, dist, **kw) -> None:
        """
        Construct the command for dist, updating
        vars(self) with any keyword parameters.
        """
        ...
    def ensure_string_list(self, option):  # -> None:
        r"""Ensure that 'option' is a list of strings.  If 'option' is
        currently a string, we split it either on /,\s*/ or /\s+/, so
        "foo bar baz", "foo,bar,baz", and "foo,   bar baz" all become
        ["foo", "bar", "baz"].
        """
        ...
    def reinitialize_command(self, command, reinit_subcommands=..., **kw): ...

def findall(dir=...):  # -> list[bytes | str]:
    """
    Find all files under 'dir' and return the list of full filenames.
    Unless dir is '.', return full filenames with dir prepended.
    """
    ...

class sic(str):
    """Treat this string as-is (https://en.wikipedia.org/wiki/Sic)"""

    ...
