"""
This type stub file was generated by pyright.
"""

from setuptools import Command

"""setuptools.command.bdist_egg

Build .egg distributions"""
def strip_module(filename):
    ...

def sorted_walk(dir): # -> Generator[tuple[Unknown, List[Unknown], List[Unknown]], None, None]:
    """Do os.walk in a reproducible way,
    independent of indeterministic filesystem readdir order
    """
    ...

def write_stub(resource, pyfile): # -> None:
    ...

class bdist_egg(Command):
    description = ...
    user_options = ...
    boolean_options = ...
    def initialize_options(self): # -> None:
        ...
    
    def finalize_options(self): # -> None:
        ...
    
    def do_install_data(self): # -> None:
        ...
    
    def get_outputs(self): # -> list[Unknown | None]:
        ...
    
    def call_command(self, cmdname, **kw):
        """Invoke reinitialized command `cmdname` with keyword args"""
        ...
    
    def run(self): # -> None:
        ...
    
    def zap_pyfiles(self): # -> None:
        ...
    
    def zip_safe(self): # -> Any | bool:
        ...
    
    def gen_header(self): # -> Literal['w']:
        ...
    
    def copy_metadata_to(self, target_dir): # -> None:
        "Copy metadata (egg info) to the target_dir"
        ...
    
    def get_ext_outputs(self): # -> tuple[list[Unknown], list[Unknown]]:
        """Get a list of relative paths to C extensions in the output distro"""
        ...
    


NATIVE_EXTENSIONS = ...
def walk_egg(egg_dir): # -> Generator[tuple[Unknown, List[Unknown], List[Unknown]], None, None]:
    """Walk an unpacked egg's contents, skipping the metadata directory"""
    ...

def analyze_egg(egg_dir, stubs): # -> bool:
    ...

def write_safety_flag(egg_dir, safe): # -> None:
    ...

safety_flags = ...
def scan_module(egg_dir, base, name, stubs): # -> bool:
    """Check whether module possibly uses unsafe-for-zipfile stuff"""
    ...

def iter_symbols(code): # -> Generator[Unknown | str, None, None]:
    """Yield names and strings used by `code` and its nested code objects"""
    ...

def can_scan(): # -> Literal[True] | None:
    ...

INSTALL_DIRECTORY_ATTRS = ...
def make_zipfile(zip_filename, base_dir, verbose=..., dry_run=..., compress=..., mode=...):
    """Create a zip file from all the files under 'base_dir'.  The output
    zip file will be named 'base_dir' + ".zip".  Uses either the "zipfile"
    Python module (if available) or the InfoZIP "zip" utility (if installed
    and found on the default search path).  If neither tool is available,
    raises DistutilsExecError.  Returns the name of the output zip file.
    """
    ...

